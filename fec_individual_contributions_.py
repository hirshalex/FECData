# -*- coding: utf-8 -*-
"""FEC Individual Contributions .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15v-gdla246YfRqTIPO8aHzUQqH9Ix7hL
"""

import pandas as pd
import numpy as np
import os
from google.colab import drive

drive.mount('/content/drive', force_remount=True)

# Paths
summary_dir = "/content/drive/MyDrive/FEC_Summary/"  # Input folder
output_dir = "/content/drive/MyDrive/FEC_Cleaned/"   # Output folder
zip_to_county_path = "/content/drive/MyDrive/Zip to County.csv"  # ZIP-to-County mapping

os.makedirs(output_dir, exist_ok=True)

# Load ZIP-to-County mapping
to_county = pd.read_csv(zip_to_county_path, dtype=str, usecols=["ZIP", "County", "State Abbreviation", "COUNTY Code", "% of ZIP Residents in County", "ZIP Code Population"], encoding="Windows-1252")
to_county.rename(columns={"ZIP": "ZIP_CODE", "COUNTY Code": "FIPS_STRING", "% of ZIP Residents in County": "ZIP_PERCENT", "ZIP Code Population": "ZIP_POPULATION"}, inplace=True)
to_county["ZIP_CODE"] = to_county["ZIP_CODE"].str[:5]  # Ensure 5-digit ZIPs
to_county["ZIP_PERCENT"] = to_county["ZIP_PERCENT"].astype(float)
to_county["ZIP_POPULATION"] = to_county["ZIP_POPULATION"].astype(float)  # Convert population to numeric
to_county["ZIP_CODE"] = to_county["ZIP_CODE"].str.zfill(5)  # Ensure 5-digit FIPS codes
to_county["FIPS_STRING"] = to_county["FIPS_STRING"].str.zfill(5)  # Ensure 5-digit FIPS codes


# Compute total population per FIPS
total_population_per_fips = to_county.groupby("FIPS_STRING")["ZIP_POPULATION"].sum()
to_county["TOTAL_FIPS_POPULATION"] = to_county["FIPS_STRING"].map(total_population_per_fips)

# Compute average state population for imputing missing FIPS population
avg_state_population = to_county.groupby("State Abbreviation")["ZIP_POPULATION"].mean()
to_county["STATE_AVG_POP"] = to_county["State Abbreviation"].map(avg_state_population)

to_county["TOTAL_FIPS_POPULATION"].fillna(to_county["STATE_AVG_POP"], inplace=True)  # Impute missing values

# Processing the summary files
for summary_file in os.listdir(summary_dir):
    if summary_file.endswith(".csv"):
        file_path = os.path.join(summary_dir, summary_file)
        print(f"ðŸ“‚ Processing: {summary_file}")

        year_parts = summary_file.replace(".csv", "").split("_")[-2:]  # Get last two parts
        year_start, year_end = map(int, year_parts)

        output_file = os.path.join(output_dir, f"fec_summary_cleaned_{year_start}_{year_end}.csv")
        error_file = os.path.join(output_dir, f"unmatched_fips_{year_start}_{year_end}.csv")
        df = pd.read_csv(file_path, dtype={"ZIP_CODE": str})
        df["ZIP_CODE"] = df["ZIP_CODE"].str[:5]  # Keep first 5 digits
        df["ZIP_CODE"] = df["ZIP_CODE"].str.zfill(5)  # Ensure 5-digit ZIP codes


        df = df[df["ENTITY_TP"] == "IND"]  # Keep only individual contributions
        df = df[df["total_donations"] >= 0]  # Remove negative donations

        # Filter data only for the years in the filename range
        df = df[(df["YEAR"] >= year_start) & (df["YEAR"] <= year_end)]

        df = df.groupby(["ZIP_CODE", "STATE", "YEAR", "ENTITY_TP"]).agg(
            total_donations=("total_donations", "sum"),
            num_donations=("num_donations", "sum")
        ).reset_index()

        # Merge with ZIP-to-County mapping
        df = df.merge(to_county[['ZIP_CODE', 'FIPS_STRING', 'County', 'State Abbreviation', 'ZIP_PERCENT', 'TOTAL_FIPS_POPULATION']], on="ZIP_CODE", how="left")
        df.dropna(subset=["FIPS_STRING"], inplace=True)  # Remove ZIPs with no FIPS match

        df = df[df["FIPS_STRING"] != "00000"]  # Remove invalid FIPS codes
        df["FIPS_STRING"] = df["FIPS_STRING"].str.zfill(5)  # Ensure 5-digit FIPS codes

        df["weighted_donations"] = df["total_donations"] * df["ZIP_PERCENT"]
        df["weighted_count"] = df["num_donations"] * df["ZIP_PERCENT"]

        grouped = df.groupby(["FIPS_STRING", "YEAR"]).agg(
            total_donations=("weighted_donations", "sum"),
            num_donations=("weighted_count", "sum"),
            total_population=("TOTAL_FIPS_POPULATION", "first")  # Get total FIPS population
        ).reset_index()

        grouped["avg_donation"] = grouped["total_donations"] / grouped["num_donations"]

        # Correct weighted standard deviation calculation
        def weighted_std(x, w):
            if np.sum(w) == 0:  # Prevent division by zero
                return 0
            mean = np.average(x, weights=w)
            variance = np.average((x - mean) ** 2, weights=w)
            return np.sqrt(variance)

        grouped["std_donations"] = df.groupby(["FIPS_STRING", "YEAR"]).apply(lambda x: weighted_std(x["weighted_donations"], x["weighted_count"])).reset_index(drop=True)
        grouped["std_donations"].fillna(0, inplace=True)  # Fill NaN values

        grouped["donation_per_capita"] = grouped["total_donations"] / grouped["total_population"]

        all_fips = to_county[["FIPS_STRING"]].drop_duplicates()
        all_years = df[["YEAR"]].drop_duplicates()
        all_fips_years = all_fips.merge(all_years, how="cross")
        all_fips_years = all_fips_years[(all_fips_years["YEAR"] >= year_start) & (all_fips_years["YEAR"] <= year_end)]

        # Merge final data with County and State Abbreviation
        final_output = all_fips_years.merge(grouped, on=["FIPS_STRING", "YEAR"], how="left").fillna(0)
        fips_to_county_state = to_county[['FIPS_STRING', 'County', 'State Abbreviation']].drop_duplicates('FIPS_STRING')
        final_output = final_output.merge(fips_to_county_state, on='FIPS_STRING', how='left')

        final_output.to_csv(output_file, index=False)
        print(f"âœ… Cleaned file saved: {output_file}")

!pip install plotly-geo==1.0.0
!pip install geopandas==0.8.1
!pip install pyshp==2.1.2
!pip install shapely==1.7.1

import pandas as pd
import plotly.express as px

# Load cleaned FEC data (ensure it has FIPS and avg_donation_per_capita)
file_path = "fec_summary_cleaned_2011_2012.csv"  # Update this to match your file
df = pd.read_csv(file_path, dtype={"FIPS_STRING": str})  # Ensure FIPS codes are strings
# df["FIPS_STRING"] = df["FIPS_STRING"].str.zfill(5)  # Ensure 5-digit FIPS codes

df = df[df["YEAR"] == 2011]

# Convert avg_donation_per_capita to numeric
df["avg_donation_per_capita"] = df["avg_donation_per_capita"].astype(str).str.replace("'", "").astype(float)

# Remove extreme outliers (top 1% of values)
# df = df[df["avg_donation_per_capita"] <= df["avg_donation_per_capita"].quantile(0.99)]

# Load US County GeoJSON (Plotly provides this for county mapping)
geojson_url = "https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json"

# Create Choropleth Map
fig = px.choropleth(
    df,
    geojson=geojson_url,  # County boundaries
    locations="FIPS_STRING",  # Column with county FIPS codes
    color="avg_donation_per_capita",  # Value to be visualized
    color_continuous_scale="Blues",  # Choose color scale
    scope="usa",  # Focus on US map
    title="Average Donation Per Capita by US County (FEC Data)",
    labels={"avg_donation_per_capita": "Avg Donation Per Capita ($)"}
)

# Adjust layout
fig.update_geos(fitbounds="locations", visible=False)
fig.update_layout(margin={"r":0,"t":50,"l":0,"b":0})

# Show the interactive map
fig.show()